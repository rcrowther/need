

Installing the Whoosh module
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Install Whoosh code. Probably,:

    pip3 whoosh

In settings.py, declare the app,:

    INSTALLED_APPS = [
        'whoosh.apps.WhooshConfig',
    ]

and declare a file route where indexes will be stored,:

    WHOOSH = os.path.join(BASE_DIR, 'wooshdb')




Building Need into Django
~~~~~~~~~~~~~~~~~~~~~~~~~~~
This application will not touch existing models. 

Pick an app with models to include in Whoosh. Create a file 'need.py'. Put this, adjusted for your model, into the file,:
    
    
    from need.need import ModelNeed,
    
    class FireworkWhoosh(ModelNeed):
       name=TextField(stored=True, field_boost=2.0)
       effect=IdField()
       make=IdField(stored=True)
    
       class Meta:
         need_index = 'firework'
         model = Firework
         fields = ['name', 'description', 'effect', 'make']
  
Note that this class is not intended to be instanciated. 

Fields
------
The fields declare how Need will save data. They are similar to Whoosh fields, and accept the same parameters. But they are lower-cased, and a handful of specific numeric types exist,:

    IntField
    Longfield
    Floatfield.

One note, if you do not set 'stored=True' on a field, you will not be able to search on the field.


The pk field
------------
The Model version of the Need classes (see below) will automatically include the pk field. If the class cannot default how to Whoosh schema the field (you changed from the default AutoField) the class will complain at runtime. You need to declare a field to explain how that field in the model should be represented by a Whoosh schema.
 
Meta
----
The Meta is where you store any of the options for how this Whoosh index will work. 


Paths
+++++
The meta can accept a 'need_index' parameter which is an override of other computation. The index will be at 'settings.WHOOSH + need_index'  (for the above, 'wooshdb/firework')

The meta can be given an 'app_label' parameter. The index will be stored in 'settings.WHOOSH + app_label _ class_name' (for the above with app_label = 'dragon', 'wooshdb/dragon_fireworkwhoosh').

Or no statement can be made, and Need will try to join the application name to the model name (for the above, 'wooshdb/fireworks_fireworkwhoosh').


How final fields are decided
++++++++++++++++++++++++++++
First, the 'fields' select the fields. Then the declarations decide how they are to be rendered. If the declarations are absent, the class scans the model and tries to guess what the field could be. Fairly often, the class will refuse to index the data.

 
Going further
-------------
There is huge depth to the capabilities of gathering data for a Whoosh index.

Introductory material,
    https://whoosh.readthedocs.io/en/latest/schema.html


Managers
~~~~~~~~
Like Django's Models, Need classes are manipulated by a manager. Managers can be written and added to Need classes in the same way as they are to Models. The access attribute is called 'actions' (not 'objects').

The managers available are only the start of what is poassible with Need and Whoosh,

+ Manager
+ ManagerManager
+ BlockingManager
+ BlockingManagerManager

The default is Manager. The blocking versions are for multi-threading, discussed later.

Manager offers a simple CRUD interface,

    bulk_add(it)
    add(**fields)
    bulk_delete(fieldname, text)
    merge(**fields)
    read(field, query, callback)
    size(self)

So,:

    FireworkNeed.actions.add(id='0', name='Flower Rocket', effect='Flower-final drooping splay', make='NobelExplosives')

Another method is available, this only makes sense for ModelNeed, where a pk field is defined (on a Need class manager, this method will throw an error),:
 
    delete(key)

The ManagerManager managers might be defined in a Need class like this,:
    
    ...
    from whoosh.managers import ManagerManager
    
    class FireworkNeed(ModelNeed):
       ...
       manager = ManagerManager()
       class Meta:
         ...
  
ManagerManager managers offer methods probably useful only for some admin, currently,: 

        clear()
        optimize()



Auto-edits
-----------
TODO: signals


Making queries - read()
-----------------------
The builtin managers offer the most basic possibility for reading,:

    read(field, query, callback)

So,:

    FireworkNeed.actions.read('author', 'fred', lambda x : print(str(x)))

The parser used is whoosh.qparser.SimpleParser, which is like most people expect of a general search engine. It handles '-', quoted literals, and ORs multiple terms.

Currently, the app is not good at exposing Whoosh abilities at querying. I've not wanted to add much to a general search engine interface https://whoosh.readthedocs.io/en/latest/searching.html. No stemming/variations, https://whoosh.readthedocs.io/en/latest/stemming.html. However, there is spell correction, https://whoosh.readthedocs.io/en/latest/spelling.html


Non-Model Whoosh
~~~~~~~~~~~~~~~~
A much freer API is available which is not conneted to Models. It inherits from api.Whoosh,:


    from need.need import Need
    
    class FireworkNeed(Need):
       ...
  
This api has no need for a model declaration. 'fields' is still required, but takes information from declared statements only. If field entries do not match a declaration, they will fail,:

    from whoosh.api import Whoosh,
    
    class FireworkNeed(Need):
       title = TextField(stored=True)
       class Meta:
           fields = ['title', 'description']
     
Here, 'description' fails because no field exists to describe it.

If you use this API, it is your responsibility to make decisions about what to store where. For some cases, you may prefer this.


Rendering Need classes as forms and results
-------------------------------------------
The need app contains code to help render search forms and results.


Hits listing
~~~~~~~~~~~~
A quick list of results from a Need e.g.:

    from need.views import List
    
    class FireworkList(List):
        need = FireworkNeed
        search_fields = 'title'

    def indexdata_to_renderdata(self, result):
        return {'url' : "/fireworks/{}".format(result['id']), 'title': result['title'], 'teaser': result['description']}
    
Internally, this uses some code called HitRendererText(). This code is described in detail below. Also, the tricky-looking indexdata_to_renderdata() method is mapping search results to what the template will use. In this case, we are defaulting many items, and using a stock template and CSS. The template wants a 'url', 'title', and 'teaser'. It doesn't care too much what they are, or what part of the search results are used, as long as the keys are there.

The List class can be overriden in most ways, the Need, the template, the renderer, the CSS, etc. But go ahead, try the view. In urls.py,:
    
    url(r'^list$', views.FireworkList.as_view(), name='list')

The view works from a query. The keyword is 'search'. So try some url like,:

    fireworks/list?search=banger
    
Should return  string of results, rendered in  the same way as a general search-engine.



Single search boxes
~~~~~~~~~~~~~~~~~~~
Django's form code caused me a lot of problems for this app. The code is too smart and general. So you get,:

    class TextInputForm()

an all-time low of Django forms; Form code rewritten to render nothing but a 'text' input box. No fields or widgets. You do get overridable validation, if you want to stop submissions getting at a codebase, and 'media' definition. The usual methods of clean(), has_changed() and is_valid() are implemented. Rendering is by as_html().

Though the class may have other uses, the obvious purpose is an all-in-one search box. The form can be used as other Django forms,:

    from django.http import HttpResponseRedirect
    from need.forms import TextInputForm

    # 1. Put some useful attributes on the class, 'name' etc. 
    class  SearchForm(TextInputForm):
        def __init__(self, **kwargs):
            super().__init__(attrs={'name':'search', 'class':'search-input', 'placeholder':"Search"})
        
            
    def general_search(request):
        if request.method == 'POST':
            form = SearchForm(request.POST)
            if form.is_valid():
                # 1. Get some results. Only one item from this class.
                data = self.cleaned_data
                # 2. Redirect to results page.
                return HttpResponseRedirect('/results/')
        else:
            form = SearchForm()
        return render(request, 'form_template.html', {'form': form})
        
However, you may prefer a more web-aware Google-like approach to the web handling, which is to not use POST but endless GET submission, passing parameters using the query string. Set the template action to an empty string,: 

    {% load i18n %} 
    ...
    
    <div id="search-form">
        <!-- empty string submits through the query string -->
        <form action="" method="get">
            {% csrf_token %}
            {{ form }}<form action="" method="get"><input class="search-button" type="submit" value="{% trans "Search" %}"/>
        </form>
    </div>

The view may contain code like this,:
    
    from django.http import HttpResponseNotAllowed
    
    # 1. Put some useful attributes on the class, 'name' etc. 
    class  SearchForm(TextInputForm):
        def __init__(self, **kwargs):
            super().__init__(attrs={'name':'search', 'class':'search-input', 'placeholder':"Search"})
            
    def general_search(request):
        if request.method == 'GET':
            query = request.GET.get('search', None)
            if not query:
                form = SearchForm()
                return render(request, 'need/search.html', {'form': form})
            else:
                # 1. maybe do some pre-validation before we look in the index
                # 2. Get some results  
                # 3. redirect to some hits result page
                return HttpResponseRedirect('/thanks/')
        return HttpResponseNotAllowed("HTTP method {0} not allowed on this view".format(request.method))
        
Note that this code aggressivly bars alternative HTTP methods. Note also that the template 'search.html' is the minimum of HTML. You either replace it or work on the CSS.

If you do not want to work on styling immediately, try SearchForm. This is a TextInputForm with template and CSS built in (like an admin form, but more general),:

    from need.forms import SearchForm

    def general_search(request):
        if request.method == 'GET':
            query = request.GET.get('search', None)
            if not query:
                form = SearchForm()
                return render(request, 'need/search.html', {'form': form})
            else:
                # 1. maybe do some pre-validation before we look in the index
                # 2. Get some results  
                # 3. redirect to some hits result page
                return HttpResponseRedirect('/thanks/')
        return HttpResponseNotAllowed("HTTP method {0} not allowed on this view".format(request.method))

Looks like this,

.. figure:: https://raw.githubusercontent.com/rcrowther/need/master/text/images/searchbox.png
    :width: 160 px
    :alt: search box screenshot
    :align: center

which will do me fine (it's responsive, too), but if you are the kind who freaks if it's not Bootstrap, time to flex your creativity.

Usually, at this point, to fill out a Django form, you would,: 

    # 1. maybe do some pre-validation before we look in the index
    # 2. Get some results  
    # 3. redirect to some hits result page

But I have left this unfinished. For a form like this, the results are the delivery. There is no side-effect database modification step. So you would redirect to a listings page (like the admin lists). If you pasted the list view above, like this,:

from django.http import HttpResponseRedirect

    def general_search(request):
        if request.method == 'GET':
            query = request.GET.get('search', None)
            if not query:
                form = SearchForm()
                return render(request, 'need/one_page_search.html', {'form': form})
            else:
                return HttpResponseRedirect('/fireworks/list?search=' + query)
        return HttpResponseNotAllowed("HTTP method {0} not allowed on this view".format(request.method))

DRY yourself off with a reverse(), for illustration I'm explicit.

That gives you a ready-made one page search, something like the front page of DuckDuckGo and Google. Another month of work and a team of five. However...


Search and results on one page
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
A one-page, one-box search is great for the user but, in admin, a waste of space. 

If you want a quick intro, go to the last subheading in this section. 

First, a special Need device,

HitRenderer
++++++++++++
HitRenderer is an odd concept you will find at 'need.renderers.HitRenderer'. It is a class-based code (not template) renderer. Like a widget, or a piece of code from inside a template. It renders HTML 'elements' (often rows) with an automatic wrap.

HitRenderer must have a element_template attribute, which is a string to take a Python3 format command. This format string defines the element layout. Do not be clever; define what you want to see arrive in the template. The attribute can be passed through initializing paramters or a class override. No need for element HTML, the class will write that e.g.:

    class HitRenderer:
        element_template = '<a href="{url}"><img src="{src}"></a>'

You can also pass or override the attribute 'element_attributes', if you need atrributes in the wrap.

That's it, nearly. HitRenderer has a wierd addition. As a form or a Form widget, it can take a Media definition. You do not need to use this, your decision. The downside is that every CSS (and JS?) file you link in a document is another server hit. Upsides are that  those hits are generally cached, and editing CSS on the renderer is cute and elegant.

Question of taste, but I wouldn't push the renderer to a template to get the media, I'd retrieve the value and pass through a template context,:

    context['media'] = renderer.media (+ any other media)

Call as_html() to get results. 

HitRenderer has two subclasses with pre-defined templates,:

    HitRendererText
    HitRendererImage

Illustration, redefining HitRendererText:

>>> from need.renderers import *
>>> class HitRendererText(HitRenderer):
>>>     element_template = '<h3><a href="{url}">{title}</a></h3><div class="url_display">{url}</div><div class="teaser">{teaser}</div>'
>>>     class Media:
>>>          css = {'screen' : ('need/css/text_hits.css',)}

We made a HitRenderer which takes a url, a title, and a 'teaser' (a short piece of text). It uses media from 'need/css/text_hits.css'. Let's make a renderer, then try some data (presumably from a Need model),:


    >>> a = HitRendererText()
    >>> a.as_html([{'url': '/firework/flare', 'title': 'Flare', 'teaser': 'It sits there, burning'},{'url': '/firework/wheel', 'title': 'Wheel', 'teaser': 'Spins, propelled by little fireball'}])

The result is code I don't want to look at,:

    '<li ><h3><a href="/firework/flare">Flare</a></h3><div class="url_display">/firework/flare</div><div class="teaser">It sits there, burning</div></li>\n<li ><h3><a href="/firework/wheel">Wheel</a></h3><div class="url_display">/firework/wheel</div><div class="teaser">Spins, propelled by little fireball</div></li>'

That's why Need has a renderer.


Forms and hits on same page
+++++++++++++++++++++++++++
More strange Need devices. I'm not keen on the idea of a form that holds results, so Need has a View, need.views.SearchHitView(). This groups together a SearchForm and a HitRendererText.

This is a lot of predefined template and CSS in one place. You may prefer to look at the code, then go back to the basics and make your own. But SearchHitView will work with minimal setup,:
    
    
    class FireworkSearchHitView(SearchHitView):
        need = FireworkNeed
        search_fields = 'title'
    
        def indexdata_to_renderdata(self, result):
            return {'url' : "/fireworks/{}".format(result['id']), 'title': result['title'], 'teaser': result['description']}
      
and in urls.py,
    
       url(r'^search$', views.FireworkSearchHitView.as_view(), name='search'),

Most of SearchHitView explains itself (I hope). It must have a Need and a 'search_fields' attribute to search on. The complex part is the indexdata_to_renderdata() method. This maps the result from the search, to the rendering template. If you cross-check, 'url', 'title', and 'teaser' are the keys the renderer needs. 
  
If you read the previous section, I said the CSS injection on the renderer was cute. Override the renderer with the pre-built HitRendererImage, then adjust indexdata_to_renderdata() method for the new renderer,:

    from .renderers import HitRendererImage
    
    class FireworkSearchHitImageView(SearchHitView):
        need = FireworkNeed
        search_fields = 'title'
        renderer = HitRendererImage()
    
        def indexdata_to_renderdata(self, result):
            return {'url' : "/paper/{}".format(result['id']), 'src': "/static/{}.jpg".format(result['id'])}

Well, it's something:

.. figure:: https://raw.githubusercontent.com/rcrowther/need/master/text/images/image_search.png
    :width: 160 px
    :alt: image search view screenshot
    :align: center





Inheritance
-------------
TODO


Need and others compared
~~~~~~~~~~~~~~~~~~~~~~~~~
It's no use to compare Django-Whoosh_ to Need. Django-Whoosh is the tightest code imaginable. It's purpose is to auto-load Model data onto a Whoosh index. Need can do that, but with inherited templating, overridable fields, non-model-based definitions, customisable managers, and more.

Compared to Haystack_, for most if not all people, Haystack is the choice. Haystack is a well-established, much-loved Django app. Need is home-brew and limited. It uses only Whoosh, which some people regard as no good. But Need is my API. I like my API. That's why I stick with it.
